{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\nexport const useCollection = (collection, _query) => {\n  _s();\n  const [documents, setDocuments] = useState(null);\n  const [error, setError] = useState(null);\n\n  // if we don't use a ref --> infinite loop in UseEffect\n  // _query is an array and is \"different\" on every function call\n\n  const query = useRef(_query).current;\n  useEffect(() => {\n    let ref = projectFirestore.collection(collection);\n    if (query) {\n      ref = ref.where(...query);\n    }\n    const unsubscribe = ref.onSnapshot(snapshot => {\n      let results = [];\n      snapshot.docs.forEach(doc => {\n        results.push({\n          ...doc.data(),\n          id: doc.id\n        });\n      });\n\n      // update state\n      setDocuments(results);\n      setError(null);\n    }, error => {\n      console.log(error);\n      setError(\"could not  fetch the data\");\n    });\n\n    // unsubscribe on unmount\n    return () => unsubscribe();\n  }, [collection, query]);\n  return {\n    documents,\n    error\n  };\n};\n_s(useCollection, \"QgmmqiSmI/cD8zVX9t4Ujn3/Cto=\");","map":{"version":3,"names":["useEffect","useRef","useState","projectFirestore","useCollection","collection","_query","_s","documents","setDocuments","error","setError","query","current","ref","where","unsubscribe","onSnapshot","snapshot","results","docs","forEach","doc","push","data","id","console","log"],"sources":["/home/petech/Projects/Personal/Github_Projects/VisualStudioCodeProjects/reactjs/money-tracker/src/hooks/useCollection.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nexport const useCollection = (collection, _query) => {\n  const [documents, setDocuments] = useState(null);\n  const [error, setError] = useState(null);\n\n  // if we don't use a ref --> infinite loop in UseEffect\n  // _query is an array and is \"different\" on every function call\n\n  const query = useRef(_query).current;\n\n  useEffect(() => {\n    let ref = projectFirestore.collection(collection);\n\n    if (query) {\n      ref = ref.where(...query);\n    }\n\n    const unsubscribe = ref.onSnapshot(\n      (snapshot) => {\n        let results = [];\n        snapshot.docs.forEach((doc) => {\n          results.push({ ...doc.data(), id: doc.id });\n        });\n\n        // update state\n        setDocuments(results);\n        setError(null);\n      },\n      (error) => {\n        console.log(error);\n        setError(\"could not  fetch the data\");\n      }\n    );\n\n    // unsubscribe on unmount\n    return () => unsubscribe();\n  }, [collection, query]);\n\n  return { documents, error };\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,OAAO,MAAMC,aAAa,GAAGA,CAACC,UAAU,EAAEC,MAAM,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA;;EAEA,MAAMU,KAAK,GAAGX,MAAM,CAACK,MAAM,CAAC,CAACO,OAAO;EAEpCb,SAAS,CAAC,MAAM;IACd,IAAIc,GAAG,GAAGX,gBAAgB,CAACE,UAAU,CAACA,UAAU,CAAC;IAEjD,IAAIO,KAAK,EAAE;MACTE,GAAG,GAAGA,GAAG,CAACC,KAAK,CAAC,GAAGH,KAAK,CAAC;IAC3B;IAEA,MAAMI,WAAW,GAAGF,GAAG,CAACG,UAAU,CAC/BC,QAAQ,IAAK;MACZ,IAAIC,OAAO,GAAG,EAAE;MAChBD,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAK;QAC7BH,OAAO,CAACI,IAAI,CAAC;UAAE,GAAGD,GAAG,CAACE,IAAI,EAAE;UAAEC,EAAE,EAAEH,GAAG,CAACG;QAAG,CAAC,CAAC;MAC7C,CAAC,CAAC;;MAEF;MACAhB,YAAY,CAACU,OAAO,CAAC;MACrBR,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,EACAD,KAAK,IAAK;MACTgB,OAAO,CAACC,GAAG,CAACjB,KAAK,CAAC;MAClBC,QAAQ,CAAC,2BAA2B,CAAC;IACvC,CAAC,CACF;;IAED;IACA,OAAO,MAAMK,WAAW,EAAE;EAC5B,CAAC,EAAE,CAACX,UAAU,EAAEO,KAAK,CAAC,CAAC;EAEvB,OAAO;IAAEJ,SAAS;IAAEE;EAAM,CAAC;AAC7B,CAAC;AAACH,EAAA,CAtCWH,aAAa"},"metadata":{},"sourceType":"module"}